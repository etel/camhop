/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CmdMsg'
 * message type.
 */

public class CmdMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 5;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 4;

    /** Create a new CmdMsg of size 5. */
    public CmdMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CmdMsg of the given data_length. */
    public CmdMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg with the given data_length
     * and base offset.
     */
    public CmdMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg using the given byte array
     * as backing store.
     */
    public CmdMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CmdMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CmdMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg embedded in the given message
     * at the given base offset.
     */
    public CmdMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CmdMsg embedded in the given message
     * at the given base offset and length.
     */
    public CmdMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CmdMsg> \n";
      try {
        s += "  [cmd=0x"+Long.toHexString(get_cmd())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [val1=0x"+Long.toHexString(get_val1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [val2=0x"+Long.toHexString(get_val2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd' is signed (false).
     */
    public static boolean isSigned_cmd() {
        return false;
    }

    /**
     * Return whether the field 'cmd' is an array (false).
     */
    public static boolean isArray_cmd() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd'
     */
    public static int offset_cmd() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd'
     */
    public static int offsetBits_cmd() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'cmd'
     */
    public short get_cmd() {
        return (short)getUIntBEElement(offsetBits_cmd(), 8);
    }

    /**
     * Set the value of the field 'cmd'
     */
    public void set_cmd(short value) {
        setUIntBEElement(offsetBits_cmd(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd'
     */
    public static int size_cmd() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cmd'
     */
    public static int sizeBits_cmd() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: val1
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'val1' is signed (false).
     */
    public static boolean isSigned_val1() {
        return false;
    }

    /**
     * Return whether the field 'val1' is an array (false).
     */
    public static boolean isArray_val1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'val1'
     */
    public static int offset_val1() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'val1'
     */
    public static int offsetBits_val1() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'val1'
     */
    public int get_val1() {
        return (int)getUIntBEElement(offsetBits_val1(), 16);
    }

    /**
     * Set the value of the field 'val1'
     */
    public void set_val1(int value) {
        setUIntBEElement(offsetBits_val1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'val1'
     */
    public static int size_val1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'val1'
     */
    public static int sizeBits_val1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: val2
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'val2' is signed (false).
     */
    public static boolean isSigned_val2() {
        return false;
    }

    /**
     * Return whether the field 'val2' is an array (false).
     */
    public static boolean isArray_val2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'val2'
     */
    public static int offset_val2() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'val2'
     */
    public static int offsetBits_val2() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'val2'
     */
    public int get_val2() {
        return (int)getUIntBEElement(offsetBits_val2(), 16);
    }

    /**
     * Set the value of the field 'val2'
     */
    public void set_val2(int value) {
        setUIntBEElement(offsetBits_val2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'val2'
     */
    public static int size_val2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'val2'
     */
    public static int sizeBits_val2() {
        return 16;
    }

}
