/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ImgStatMsg'
 * message type.
 */

public class ImgStatMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 33;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 5;

    /** Create a new ImgStatMsg of size 33. */
    public ImgStatMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ImgStatMsg of the given data_length. */
    public ImgStatMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg with the given data_length
     * and base offset.
     */
    public ImgStatMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg using the given byte array
     * as backing store.
     */
    public ImgStatMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ImgStatMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ImgStatMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg embedded in the given message
     * at the given base offset.
     */
    public ImgStatMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ImgStatMsg embedded in the given message
     * at the given base offset and length.
     */
    public ImgStatMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ImgStatMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [width=0x"+Long.toHexString(get_width())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [height=0x"+Long.toHexString(get_height())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_size=0x"+Long.toHexString(get_data_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timeAcq=0x"+Long.toHexString(get_timeAcq())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timeProc=0x"+Long.toHexString(get_timeProc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tmp1=0x"+Long.toHexString(get_tmp1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tmp2=0x"+Long.toHexString(get_tmp2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tmp3=0x"+Long.toHexString(get_tmp3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tmp4=0x"+Long.toHexString(get_tmp4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: width
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'width' is signed (false).
     */
    public static boolean isSigned_width() {
        return false;
    }

    /**
     * Return whether the field 'width' is an array (false).
     */
    public static boolean isArray_width() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'width'
     */
    public static int offset_width() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'width'
     */
    public static int offsetBits_width() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'width'
     */
    public int get_width() {
        return (int)getUIntBEElement(offsetBits_width(), 16);
    }

    /**
     * Set the value of the field 'width'
     */
    public void set_width(int value) {
        setUIntBEElement(offsetBits_width(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'width'
     */
    public static int size_width() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'width'
     */
    public static int sizeBits_width() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: height
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'height' is signed (false).
     */
    public static boolean isSigned_height() {
        return false;
    }

    /**
     * Return whether the field 'height' is an array (false).
     */
    public static boolean isArray_height() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'height'
     */
    public static int offset_height() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'height'
     */
    public static int offsetBits_height() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'height'
     */
    public int get_height() {
        return (int)getUIntBEElement(offsetBits_height(), 16);
    }

    /**
     * Set the value of the field 'height'
     */
    public void set_height(int value) {
        setUIntBEElement(offsetBits_height(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'height'
     */
    public static int size_height() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'height'
     */
    public static int sizeBits_height() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_size
    //   Field type: long, unsigned
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_size' is signed (false).
     */
    public static boolean isSigned_data_size() {
        return false;
    }

    /**
     * Return whether the field 'data_size' is an array (false).
     */
    public static boolean isArray_data_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_size'
     */
    public static int offset_data_size() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_size'
     */
    public static int offsetBits_data_size() {
        return 40;
    }

    /**
     * Return the value (as a long) of the field 'data_size'
     */
    public long get_data_size() {
        return (long)getUIntBEElement(offsetBits_data_size(), 32);
    }

    /**
     * Set the value of the field 'data_size'
     */
    public void set_data_size(long value) {
        setUIntBEElement(offsetBits_data_size(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_size'
     */
    public static int size_data_size() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_size'
     */
    public static int sizeBits_data_size() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeAcq
    //   Field type: long, unsigned
    //   Offset (bits): 72
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeAcq' is signed (false).
     */
    public static boolean isSigned_timeAcq() {
        return false;
    }

    /**
     * Return whether the field 'timeAcq' is an array (false).
     */
    public static boolean isArray_timeAcq() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeAcq'
     */
    public static int offset_timeAcq() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeAcq'
     */
    public static int offsetBits_timeAcq() {
        return 72;
    }

    /**
     * Return the value (as a long) of the field 'timeAcq'
     */
    public long get_timeAcq() {
        return (long)getUIntBEElement(offsetBits_timeAcq(), 32);
    }

    /**
     * Set the value of the field 'timeAcq'
     */
    public void set_timeAcq(long value) {
        setUIntBEElement(offsetBits_timeAcq(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeAcq'
     */
    public static int size_timeAcq() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeAcq'
     */
    public static int sizeBits_timeAcq() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeProc
    //   Field type: long, unsigned
    //   Offset (bits): 104
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeProc' is signed (false).
     */
    public static boolean isSigned_timeProc() {
        return false;
    }

    /**
     * Return whether the field 'timeProc' is an array (false).
     */
    public static boolean isArray_timeProc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeProc'
     */
    public static int offset_timeProc() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeProc'
     */
    public static int offsetBits_timeProc() {
        return 104;
    }

    /**
     * Return the value (as a long) of the field 'timeProc'
     */
    public long get_timeProc() {
        return (long)getUIntBEElement(offsetBits_timeProc(), 32);
    }

    /**
     * Set the value of the field 'timeProc'
     */
    public void set_timeProc(long value) {
        setUIntBEElement(offsetBits_timeProc(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeProc'
     */
    public static int size_timeProc() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeProc'
     */
    public static int sizeBits_timeProc() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tmp1
    //   Field type: long, unsigned
    //   Offset (bits): 136
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tmp1' is signed (false).
     */
    public static boolean isSigned_tmp1() {
        return false;
    }

    /**
     * Return whether the field 'tmp1' is an array (false).
     */
    public static boolean isArray_tmp1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tmp1'
     */
    public static int offset_tmp1() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tmp1'
     */
    public static int offsetBits_tmp1() {
        return 136;
    }

    /**
     * Return the value (as a long) of the field 'tmp1'
     */
    public long get_tmp1() {
        return (long)getUIntBEElement(offsetBits_tmp1(), 32);
    }

    /**
     * Set the value of the field 'tmp1'
     */
    public void set_tmp1(long value) {
        setUIntBEElement(offsetBits_tmp1(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'tmp1'
     */
    public static int size_tmp1() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tmp1'
     */
    public static int sizeBits_tmp1() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tmp2
    //   Field type: long, unsigned
    //   Offset (bits): 168
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tmp2' is signed (false).
     */
    public static boolean isSigned_tmp2() {
        return false;
    }

    /**
     * Return whether the field 'tmp2' is an array (false).
     */
    public static boolean isArray_tmp2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tmp2'
     */
    public static int offset_tmp2() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tmp2'
     */
    public static int offsetBits_tmp2() {
        return 168;
    }

    /**
     * Return the value (as a long) of the field 'tmp2'
     */
    public long get_tmp2() {
        return (long)getUIntBEElement(offsetBits_tmp2(), 32);
    }

    /**
     * Set the value of the field 'tmp2'
     */
    public void set_tmp2(long value) {
        setUIntBEElement(offsetBits_tmp2(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'tmp2'
     */
    public static int size_tmp2() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tmp2'
     */
    public static int sizeBits_tmp2() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tmp3
    //   Field type: long, unsigned
    //   Offset (bits): 200
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tmp3' is signed (false).
     */
    public static boolean isSigned_tmp3() {
        return false;
    }

    /**
     * Return whether the field 'tmp3' is an array (false).
     */
    public static boolean isArray_tmp3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tmp3'
     */
    public static int offset_tmp3() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tmp3'
     */
    public static int offsetBits_tmp3() {
        return 200;
    }

    /**
     * Return the value (as a long) of the field 'tmp3'
     */
    public long get_tmp3() {
        return (long)getUIntBEElement(offsetBits_tmp3(), 32);
    }

    /**
     * Set the value of the field 'tmp3'
     */
    public void set_tmp3(long value) {
        setUIntBEElement(offsetBits_tmp3(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'tmp3'
     */
    public static int size_tmp3() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tmp3'
     */
    public static int sizeBits_tmp3() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tmp4
    //   Field type: long, unsigned
    //   Offset (bits): 232
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tmp4' is signed (false).
     */
    public static boolean isSigned_tmp4() {
        return false;
    }

    /**
     * Return whether the field 'tmp4' is an array (false).
     */
    public static boolean isArray_tmp4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tmp4'
     */
    public static int offset_tmp4() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tmp4'
     */
    public static int offsetBits_tmp4() {
        return 232;
    }

    /**
     * Return the value (as a long) of the field 'tmp4'
     */
    public long get_tmp4() {
        return (long)getUIntBEElement(offsetBits_tmp4(), 32);
    }

    /**
     * Set the value of the field 'tmp4'
     */
    public void set_tmp4(long value) {
        setUIntBEElement(offsetBits_tmp4(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'tmp4'
     */
    public static int size_tmp4() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tmp4'
     */
    public static int sizeBits_tmp4() {
        return 32;
    }

}
